341c341
< 
---
>     
346c346
<   ps_ready = 1;                 // tell everyone the PS is ready
---
>   ps_ready = 1;         // tell everyone the PS is ready
351c351
<     vTaskDelayUntil (&xLastWakeTime, 100);      // 1 millisecond per tick
---
>     vTaskDelayUntil (&xLastWakeTime, 100);   // 1 millisecond per tick
368c368
<     mcp9808_read_float ();            // Update heat sink temperture reading
---
>     mcp9808_read_float ();      // Update heat sink temperture reading
401,402c401,402
<   clear_pixmap ();
<   oled_ssd1322_clear ();
---
> //  clear_pixmap ();
> //  oled_ssd1322_clear ();
508c508
<   gpio_set (GPIOB, GPIO11);     // Reset pin
---
>   gpio_set (GPIOB, GPIO11);  // Release OLED reset pin
509a510
>   oled_display_off();
512a514
>    
537c539
<   oled_ssd1322_clear ();
---
> //  oled_ssd1322_clear ();
543c545
<   oled_init_all ();
---
> //  oled_init_all ();
547c549
<     clear_pixmap ();            // does not appear to be needed
---
>     clear_pixmap ();  // Without this we get overlap chars
781,824d782
< #if 0
< void
< mcp9808_init (void)
< {
< }
< 
< #define MCP9808_TEMP_REG 0x05
< int
< mcp9808_read_tens_deg (void)
< {
<   uint8_t addr = MCP9808_ADDR (0);      // I2C Address
<   uint8_t buf[5];
<   uint16_t val16 = 0;
< 
<   // Set register pointer 
<   i2c_start_addr (&i2c, addr, Write);
<   i2c_write (&i2c, MCP9808_TEMP_REG);       // AMBIENT TEMPERATURE REGISTER
<   i2c_stop (&i2c);
< 
<   i2c_start_addr (&i2c, addr, Read);
<   i2c_read_bytes (&i2c, buf, 2);
<   i2c_stop (&i2c);
< 
<   buf[0] &= 0x1F; // Clear flag bits
<   val16 = (buf[0] << 8) | buf[1]; // temperature deg C * 16
< 
<   // Needs to be divided  by 16 to convert to degs C.
<   return val16;
< }
< 
< float
< mcp9808_read_float (void)
< {
<   int temp_mills=0;
<   float temp;
<   
<   temp_mills = mcp9808_read_tens_deg ();
<   temp = temp_mills / (16.0);   // save float value
<   gcvt_2 (temp, 1, mcp9808_str);
< 
<   return temp;
< }
< #endif
< 
1370c1328
< 
---
>  
