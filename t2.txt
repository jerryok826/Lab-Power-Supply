49,58d48
< #if 0
< void
< wait_til_usb_ready (void)
< {
<   while (!usb_ready ()) {
<     vTaskDelay (pdMS_TO_TICKS (100));
<   }
< }
< #endif
< 
74a65,72
> void
> wait_til_usb_ready (void)
> {
>   while (!usb_ready ()) {
>     vTaskDelay (pdMS_TO_TICKS (100));
>   }
> }
> 
76,77c74,75
< //#define GPIO_PORT_LED		GPIOC   // Builtin LED port
< // #define GPIO_LED		GPIO12  // Builtin LED
---
> #define GPIO_PORT_LED		GPIOC   // Builtin LED port
> #define GPIO_LED		GPIO12  // Builtin LED
98,144d95
< typedef struct _led_db
< {
<   uint32_t port;
<   uint32_t bit;  
<   uint32_t invert;  
< } led_db_t;
< 
< #define OUTPUT_LED 0
< #define MEM1_LED   1
< #define MEM2_LED   2
< #define DEBUG_LED  3
< #define OC_LED     4
< 
< led_db_t led[] = {
<                {GPIOB, GPIO1,  1}, // OUTPUT_LED
<                {GPIOB, GPIO14, 1}, // MEM1_LED
<                {GPIOB, GPIO15, 1}, // MEM2_LED
<                {GPIOC, GPIO12, 0}, // DEBUG_LED
<                {GPIOC, GPIO11, 0}, // OC_LED
< };
< 
< void setup_led(int led_nub)
< {    
< //  gpio_set_mode (GPIO_PORT_LED, GPIO_MODE_OUTPUT_50_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
<   gpio_set_mode (led[led_nub].port, GPIO_MODE_OUTPUT_50_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, led[led_nub].bit);
< }
< 
< void led_on(int led_nub)
< {    
< //  gpio_set (GPIO_PORT_OUT_ENB, GPIO_OUT_ENB);
<  if (led[led_nub].invert) {
<     gpio_set (led[led_nub].port, led[led_nub].bit);
<  } else {
<     gpio_clear (led[led_nub].port, led[led_nub].bit);
<  }
< }
< 
< void led_off(int led_nub)
< {    
< //  gpio_set (GPIO_PORT_OUT_ENB, GPIO_OUT_ENB);
<  if (led[led_nub].invert) {
<     gpio_clear (led[led_nub].port, led[led_nub].bit);
<  } else {
<     gpio_set (led[led_nub].port, led[led_nub].bit);
<  }
< }
< 
167,168d117
< int show_status_flag = 0;
< 
244c193
<   while (!adc_eoc (ADC1)) {
---
>   while (!adc_eoc (ADC1))
246d194
<   }
314a263
> //  int program_bytes = 0;
316,333c265
<   // Init the hardware
<   ina219_reset ();
<   mcp4728_init ();
<   ina219_init ();
<   
<   led_on(OUTPUT_LED);
<   led_on(MEM1_LED);
<   led_on(MEM2_LED);
<   led_on(DEBUG_LED);
<   led_on(OC_LED);
<   
<    vTaskDelayUntil (&xLastWakeTime, pdMS_TO_TICKS (1000));
<    
<   led_off(OUTPUT_LED);
<   led_off(MEM1_LED);
<   led_off(MEM2_LED);
<   led_off(DEBUG_LED);
<   led_off(OC_LED);
---
> //  program_bytes = flash_bytes_used();
337,342c269,270
< //    gpio_toggle (GPIOC, GPIO12);
<    if(cntr & 1) {
<       led_on(DEBUG_LED);
<    } else {
<       led_off(DEBUG_LED);
<    }
---
>     gpio_toggle (GPIOC, GPIO12);
> 
345a274
> #if 0
356,359c285
< 
<     if ((!(++cntr & 7)) && (show_status_flag == 1)) {
<       show_status ();
<     }
---
> #endif
363,364c289
< #if 0
<     if ((!(++cntr & 7)) && (show_status_flag == 1)) {
---
>     if (!(++cntr & 7)) {
373d297
< #endif
419,420c343,344
< void
< init_cursors (void)
---
> void init_cursors(void);
> void init_cursors(void)
440c364
<   init_cursors ();
---
>   init_cursors();
456c380
<     clear_pixmap ();            // does not appear to be needed
---
>     clear_pixmap ();            // does not apper to be needed
460,463c384
<     current_read ();  
<     mcp9808_read ();
<     gcvt_2 (mcp9808_float_temp, 1, mcp9808_str);
< 
---
>     current_read ();
471,472c392
<       // Full scale se to current limit 
<       line_len = (int) ((measured_current * 256.0) / current_set);
---
>       line_len = (int) ((measured_current * 256.0) / current_set); // Full scale se to current limit 
477c397
< 
---
>     
483c403
< 
---
>     
489c409
< 
---
>     
651c571
< 
---
> //  std_printf ("%s(%d) 0x%02X 0x%02X\n", __func__, __LINE__, buf[0], buf[1]);
687c607
<     current_multi = 1;    
---
>     current_position = 1;
694,708d613
< output_enble (int state)
< {
<   if (state & 1) {
<     mcp23017_output_state |= (1 << 10);
<     output_enb (1);
<   }
<   else {
<     mcp23017_output_state &= ~(1 << 10);
<     output_enb (0);
<   }
< 
< //  mcp23017_write16 (GPIO_REG, mcp23017_output_state);
< }
< 
< void
719,720c624
<     output_enb (1); 
<     led_on(OUTPUT_LED);
---
>     output_enb (1);
725d628
<     led_off(OUTPUT_LED);
728c631
< //  mcp23017_write16 (GPIO_REG, mcp23017_output_state);
---
>   mcp23017_write16 (GPIO_REG, mcp23017_output_state);
735,736c638
<   current_wrt (0.250);
<   init_cursors ();
---
>   init_cursors();
753c655
< //  mcp23017_write16 (GPIO_REG, mcp23017_output_state);
---
>   mcp23017_write16 (GPIO_REG, mcp23017_output_state);
760,761c662
<   current_wrt (0.300);
<   init_cursors ();
---
>   init_cursors();
777c678
< //  mcp23017_write16 (GPIO_REG, mcp23017_output_state);
---
>   mcp23017_write16 (GPIO_REG, mcp23017_output_state);
815,817c716,718
< //  mcp23017_io_dir &= ~(1 << 10);        // Output Led driver
< //  mcp23017_io_dir &= ~(1 << 12);        // Mem2 Led driver
< //  mcp23017_io_dir &= ~(1 << 14);        // Mem1 Led driver
---
>   mcp23017_io_dir &= ~(1 << 10);        // Output Led driver
>   mcp23017_io_dir &= ~(1 << 12);        // Mem2 Led driver
>   mcp23017_io_dir &= ~(1 << 14);        // Mem1 Led driver
890c791
<         // Check all Buttons
---
>         // Check Output Buttons
899c800
<         if (!(state = (mcp23017_inputs >> 8) & 1)) {
---
>         if (!(state = (mcp23017_inputs >> 11) & 1)) {
904c805
<         if (!(state = (mcp23017_inputs >> 7) & 1)) {
---
>         if (!(state = (mcp23017_inputs >> 13) & 1)) {
909c810
<         if (!(state = (mcp23017_inputs >> 6) & 1)) {
---
>         if (!(state = (mcp23017_inputs >> 15) & 1)) {
957d857
< 
963,964c863,865
<   
< #if 0 // def USE_USB
---
> //  int indx = 0;
> 
> #ifdef USE_USB
967c868
< 
---
>  
970c871,875
<   cmd_line_process ();
---
>   ina219_reset ();
> 
>   mcp4728_init ();
> 
>   ina219_init ();
972a878
> 
1009,1030d914
< void
< show_status (void)
< {
<   char str[50];
< 
<   memset (str, 0, sizeof (str));
<   gcvt_2 (measured_voltage, 3, str);
<   std_printf ("\n Output: %s V", str);
< 
<   memset (str, 0, sizeof (str));
<   gcvt_2 (measured_current, 3, str);
<   std_printf (", %s A", str);
< 
<   mcp9808_read ();
< //  memset (str, 0, sizeof (str));
<   gcvt_2 (mcp9808_float_temp, 1, mcp9808_str);
<   std_printf (", temp: %sC\n", mcp9808_str);
< 
<   // Read stm32f103 temp, ref v, ch0, and ch1. PA0 and PA1
<   rd_temp ();
< }
< 
1064c948
< //  gpio_set_mode (GPIO_PORT_LED, GPIO_MODE_OUTPUT_50_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
---
>   gpio_set_mode (GPIO_PORT_LED, GPIO_MODE_OUTPUT_50_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO12);
1070,1083d953
<   setup_led(OUTPUT_LED);
<   setup_led(MEM1_LED);
<   setup_led(MEM2_LED);
<   setup_led(DEBUG_LED);
<   setup_led(OC_LED);
< 
< #if 0
<   led_on(OUTPUT_LED);
<   led_on(MEM1_LED);
<   led_on(MEM2_LED);
<   led_on(DEBUG_LED);
<   led_on(OC_LED);
< #endif
< 
1087,1088c957,958
<   
< #if 1 // ndef USE_USB  
---
> 
> #ifndef USE_USB  
1109,1110c979,980
< 
< #if 0 // def USE_USB  
---
>   
> #ifdef USE_USB  
1112c982
<   std_set_device (mcu_usb);	// Use USB for std I/O
---
>   std_set_device (mcu_usb);     // Use USB for std I/O
1114c984
< 
---
>   
1121a992
> #if 0
1122a994
> #endif
1124c996
< #define STACK_SIZE 800          // was 800
---
> #define STACK_SIZE 500          // was 800
1130c1002
<   xTaskCreate (console_task, "console", STACK_SIZE, NULL, configMAX_PRIORITIES - 1, NULL);
---
> xTaskCreate (console_task, "console", STACK_SIZE, NULL, configMAX_PRIORITIES - 1, NULL);
1131a1004
> #if 0
1137a1011
> #endif
1152a1027
> 
