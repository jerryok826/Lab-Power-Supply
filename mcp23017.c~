/*********************************************************************
 * mcp23017.c : Interface with MCP23017 I/O Extender Chip
 *
 * This code assumes the following:
 *
 *	1. MCP23017 is configured for address 0x20
 *	2. RPi's GPIO 17 (GEN0) will be used for sensing interrupts
 *	3. Assumed there is a pullup on GPIO 17.
 *	4. MCP23017 GPA4-7 and GPB4-7 will be inputs, with pullups.
 *	5. MCP23017 GPA0-3 and GPB0-3 will be ouputs.
 *	6. MCP23017 signals interrupt active low.
 *	7. MCP23017 operating in non-banked register mode.
 *
 * Inputs sensed will be copied to outputs:
 *	1. GPA4-7 copied to GPA0-3
 *	2. GPB4-7 copied to GPB0-3
 *
 *********************************************************************/

#if 0
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <signal.h>
#include <assert.h>
#include <sys/ioctl.h>
#include <sys/poll.h>
#include <linux/i2c-dev.h>

#include "i2c_funcs.c"		/* I2C routines */
#endif
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <stdint.h>

#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include <libopencm3/stm32/adc.h>
#include <libopencm3/stm32/spi.h>

#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "mcuio.h"
#include "miniprintf.h"

#include "i2c.h"
#include "mcp23017.h"

// indent -gnu -br -cli2 -lp -nut -l100 mcp23017.c

/* Change to i2c-0 if using early Raspberry Pi */
// static const char *node = "/dev/i2c-1";

// registers bank selector
#define GPIOA_BANK	0
#define GPIOB_BANK	1

// registers
#define IODIR	0
#define IPOL	1
#define GPINTEN	2
#define DEFVAL	3
#define INTCON	4
#define IOCON	5
#define GPPU	6
#define INTF	7
#define INTCAP	8
#define GPIO	9
#define OLAT	10

#define MCP_REGISTER(r,g) (((r)<<1)|(g)) /* For I2C routines */
#define MCP23017_ADDR(n) (0x20|((n)&7))

// static unsigned gpio_addr = 0x20;	/* MCP23017 I2C Address */
// static const int gpio_inta = 17;	/* GPIO pin for INTA connection */
static int is_signaled = 0;		/* Exit program if signaled */

extern I2C_Control i2c;  // I2C Control struct

// #include "sysgpio.c"

/*
 * Signal handler to quit the program :
 */
#if 0
static void
sigint_handler(int signo) {
	is_signaled = 1;		/* Signal to exit program */
}
#endif

void
mcp23017_write16 (uint8_t reg, uint16_t reg_val)
{
  uint8_t addr = MCP23017_ADDR (0);     // I2C Address

  i2c_start_addr (&i2c, addr, Write);
  i2c_write (&i2c, reg);
  i2c_write (&i2c, reg_val>>8);
  i2c_write (&i2c, reg_val&0xff);
  i2c_stop (&i2c);
}

/*
 * Write to MCP23017 A or B register set:
 */
int
mcp23017_write(int reg,int AB,int value) 
{
  int rc=0;
  unsigned reg_addr = MCP_REGISTER(reg,AB);
  uint8_t addr = MCP23017_ADDR (0);     // I2C Address

  i2c_start_addr (&i2c, addr, Write);
  i2c_write (&i2c, reg_addr);
  i2c_write (&i2c, value);
  i2c_stop (&i2c);

   return rc;
}

int
mcp23017_reg_sel(int reg_addr) 
{
  uint8_t addr = MCP23017_ADDR (0);     // I2C Address

  i2c_start_addr (&i2c, addr, Write);
  i2c_write (&i2c, reg_addr);
  i2c_stop (&i2c);

   return 0;
}

/*
 * Write value to both MCP23017 register sets :
 */
void
mcp23017_write_both(int reg,int value) 
{
	mcp23017_write(reg,GPIOA_BANK,value);	/* Set A */
	mcp23017_write(reg,GPIOB_BANK,value);	/* Set B */
}

uint16_t
mcp23017_read16( int reg_addr) 
{
//  return i2c_read16(gpio_addr,reg_addr) & 0xF0F0;
  uint8_t buf[10];

  uint8_t addr = MCP23017_ADDR (0);     // I2C Address
  mcp23017_reg_sel(reg_addr);
 
  i2c_start_addr (&i2c, addr, Read);
  i2c_read_bytes (&i2c, buf, 2);  
  i2c_stop (&i2c);
  return (buf[0]<<8) | buf[1];
}

/*
 * Read the MCP23017 input pins (excluding outputs,
 * 16-bits) :
 */
unsigned
mcp23017_inputs(void) 
{
//  return i2c_read16(gpio_addr,reg_addr) & 0xF0F0;

  unsigned reg_addr = MCP_REGISTER(GPIO,GPIOA_BANK);
  return mcp23017_read16(reg_addr);
}

/*
 * Write 16-bits to outputs :
 */
void
mcp23017_outputs(int value) 
{
#if 0
	i2c_write16(gpio_addr,reg_addr,value & 0x0F0F);
#endif

  unsigned reg_addr = MCP_REGISTER(GPIO,GPIOA_BANK);
  uint8_t addr = MCP23017_ADDR (0);     // I2C Address
  
  i2c_start_addr (&i2c, addr, Write);
  i2c_write (&i2c, reg_addr);
  i2c_write (&i2c, (value>>8));
  i2c_write (&i2c, value&0xff);
  i2c_stop (&i2c);
}

/*
 * Read MCP23017 captured values (16-bits):
 */
unsigned
mcp23017_captured(void) 
{
//	return i2c_read16(gpio_addr,reg_addr) & 0xF0F0;

	unsigned reg_addr = MCP_REGISTER(INTCAP,GPIOA_BANK);
	return mcp23017_read16(reg_addr) & 0xF0F0;
}

/*
 * Read interrupting input flags (16-bits):
 */
unsigned
mcp23017_interrupts(void) 
{
//	return i2c_read16(gpio_addr,reg_addr) & 0xF0F0;
	unsigned reg_addr = MCP_REGISTER(INTF,GPIOA_BANK);
	return mcp23017_read16(reg_addr) & 0xF0F0;
}

/*
 * Configure the MCP23017 GPIO Extender :
 */
void
mcp23017_init(int io_dir) 
{
	int v, int_flags;

        mcp23017_write(IOCON,0, 0b01000100);
	mcp23017_write16(IOCON,0b01000100);	/* MIRROR=1,ODR=1 */
	mcp23017_write16(GPINTEN,0x00);	/* No interrupts enabled */
	mcp23017_write16(DEFVAL,0x00);	/* Clear default value */
	mcp23017_write16(OLAT,0x00);		/* OLATx=0 */
	mcp23017_write16(GPPU, 0xff); // 0b11110000);	   /* 4-7 are pullup */
	mcp23017_write16(IPOL,0b00000000);   /* No inverted polarity */
	mcp23017_write16(IODIR, io_dir); // 0b11110000);     /* 4-7 are inputs, 0-3 outputs */
	mcp23017_write16(INTCON,0b00000000); /* Cmp inputs to previous */
	mcp23017_write16(GPINTEN,0b11110000); /* Interrupt on changes */

#if 0
	mcp23017_write_both(IOCON,0b01000100);	/* MIRROR=1,ODR=1 */
	mcp23017_write_both(GPINTEN,0x00);	/* No interrupts enabled */
	mcp23017_write_both(DEFVAL,0x00);	/* Clear default value */
	mcp23017_write_both(OLAT,0x00);		/* OLATx=0 */
	mcp23017_write_both(GPPU, 0xff); // 0b11110000);	/* 4-7 are pullup */
	mcp23017_write_both(IPOL,0b00000000);   /* No inverted polarity */
	mcp23017_write_both(IODIR, io_dir); // 0b11110000);	/* 4-7 are inputs, 0-3 outputs */
	mcp23017_write_both(INTCON,0b00000000);	/* Cmp inputs to previous */
	mcp23017_write_both(GPINTEN,0b11110000); /* Interrupt on changes */
#endif

	/*
	 * Loop until all interrupts are cleared:
	 */
#if 0
	do	{
		int_flags = mcp23017_interrupts();
		if ( int_flags != 0 ) {
			v = mcp23017_captured();
//			printf("  Got change %04X values %04X\n",int_flags,v);
		}
	} while ( int_flags != 0x0000 && !is_signaled );
#endif
}

/*
 * Copy input bit settings to outputs :
 */
void
post_outputs(void) 
{
	int inbits = mcp23017_inputs();		/* Read inputs */
	int outbits = inbits >> 4;		/* Shift to output bits */
	mcp23017_outputs(outbits);		/* Copy inputs to outputs */
//	printf("  Outputs:      %04X\n",outbits);
}

/*
 * Main program :
 */
#if 0
int
main(int argc,char **argv) {
	int int_flags, v;
	int fd;

	signal(SIGINT,sigint_handler);		/* Trap on SIGINT */

	i2c_init(node);				/* Initialize for I2C */
	mcp23017_init();			/* Configure MCP23017 @ 20 */

	fd = gpio_open_edge(gpio_inta);		/* Configure INTA pin */

	puts("Monitoring for MCP23017 input changes:\n");
	post_outputs();				/* Copy inputs to outputs */

	do	{
		gpio_poll(fd);			/* Pause until an interrupt */

		int_flags = mcp23017_interrupts();
		if ( int_flags ) {
			v = mcp23017_captured();
//			printf("  Input change: flags %04X values %04X\n", int_flags,v);
			post_outputs();
		}
	} while ( !is_signaled );		/* Quit if ^C'd */

	fputc('\n',stdout);

	i2c_close();				/* Close I2C driver */
	close(fd);				/* Close gpio17/value */
	gpio_close(gpio_inta);			/* Unexport gpio17 */
	return 0;
}
#endif

/*********************************************************************
 * End mcp23017.c - Warren Gay
 * Mastering the Raspberry Pi - ISBN13: 978-1-484201-82-4
 * This source code is placed into the public domain.
 *********************************************************************/
